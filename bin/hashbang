#! /usr/bin/env perl
use strict;
use warnings;
use 5.010;

# Defaults...
my $DEFAULT_APP = '/usr/bin/perl';

# Perlbrew available versions...
my @perlbrew_versions = sort map { m{ (perl-\S*) }xms ? $1 : () } `perlbrew list`;
chomp @perlbrew_versions;

# Separate the filename and other args...
my $source_file;
my %config;

ARG:
while (my $arg = shift @ARGV) {
    if ($arg =~ /^ -d $/x) { $config{debug} = 1; next ARG; }
    if ($arg =~ /^ -m $/x) { $config{pager} = 1; next ARG; }

    $source_file = $arg;
    last ARG;
}

# Grab the source...
my $source_code = slurp($source_file) // exit;

# Is there a specific Perl version specified???
my @version = get_version($source_code, qr{^ \s* use \s+}xms);

# Give up if not...
exit if !@version;

# Otherwise, find perlbrew version that best satisfies the requirement...
my @candidates;
for my $candidate_perl (@perlbrew_versions) {
    my @candidate_version = get_version($candidate_perl, qr{ perl- }xms);
    if (candidate_satisfies(\@candidate_version, \@version)) {
        push @candidates, $candidate_perl;
    }
}

if (@candidates) {
    call_via_perlbrew($candidates[-1], \%config, "$source_file @ARGV");
}
else {
    exec "$DEFAULT_APP $source_file @ARGV";
}

sub candidate_satisfies {
    my ($candidate_version_ref, $version_ref) = @_;
    for my $index (0..$#{$version_ref}) {
        return 0 if $candidate_version_ref->[$index] != $version_ref->[$index];
    }
    return 1;
}

sub get_version {
    my ($string, $prefix) = @_;

    given ($string) {
        when (m{ $prefix  v? (\d++) [.] (\d++) [.] (\d++) }xms) {
            return $1+0, $2+0, $3+0;
        }
        when (m{ $prefix  v (\d++) [.] (\d++) }xms) {
           return $1+0, $2+0;
        }
        when (m{ $prefix  (\d++) [.] (\d{1,3}+) (\d{1,3}+) }xms) {
            return $1+0, $2+0, $3+0;
        }
        when (m{ $prefix  (\d++) [.] (\d{1,3}+) }xms) {
            return $1+0, $2+0;
        }
    }

    return;
}

# Read in the contents of a file...
sub slurp {
    local (@ARGV,$/) = shift;
    return scalar readline;
}

# Execute a command under the specified version of Perl...
sub call_via_perlbrew {
    my ($version, $config_ref, $command) = @_;

    # Which form of Perl???
    my $perl = 'perl';
    if ($config_ref->{debug}) {
        $perl .= ' -d';
    }

    # Paged???
    my $pager = $config_ref->{pager} ? qq{ | $ENV{PAGER}} : q{};

    # This will be a sub-shell usage of perlbrew...
    $ENV{PERLBREW_SKIP_INIT} = 1;

    # Which shell are we using???
    my $env_extractor_pat
        = $ENV{SHELL} =~ m{csh \Z}xms  ?  qr{\A \s* setenv \s+ (\S+) \s+ (.*)}xms
        :                                 qr{\A \s* export \s+ (\S+?) =  (.*)}xms
        ;

    # Ask perlbrew for the necessary environment for the given version...
    for my $env (`perlbrew env $version`) {
        # Extract the data and update the current environment...
        chomp $env;
        $env =~ $env_extractor_pat  or next;
        $ENV{$1} = $2;
    }

    # Execute it...
    system qq{$ENV{SHELL} -c '$perl $command $pager'};
}
